#!/usr/bin/env python3
"""
Setup script for API keys configuration
This script helps you set up the required API keys for LLM Code Analyzer
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create a .env file with user-provided API keys."""
    print("🔧 Setting up API Keys for LLM Code Analyzer")
    print("=" * 50)
    
    # Check if .env already exists
    env_path = Path('.env')
    if env_path.exists():
        print("⚠️  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    # Get API keys from user
    print("\n📝 Please provide your API keys:")
    print("(Press Enter to skip optional keys)")
    
    gemini_key = input("\n🔑 Gemini API Key (REQUIRED for multimodal analysis): ").strip()
    if not gemini_key:
        print("❌ Gemini API Key is required for multimodal analysis!")
        print("Get your key from: https://makersuite.google.com/app/apikey")
        return
    
    openai_key = input("🔑 OpenAI API Key (optional): ").strip()
    anthropic_key = input("🔑 Anthropic API Key (optional): ").strip()
    deepseek_key = input("🔑 DeepSeek API Key (optional): ").strip()
    mercury_key = input("🔑 Mercury API Key (optional): ").strip()
    
    # Create .env content
    env_content = f"""# API Keys for LLM Code Analyzer
# Generated by setup_api_keys.py

# Required for Gemini Vision (Multi-Modal Analysis)
GEMINI_API_KEY={gemini_key}

# Optional: OpenAI API Key (for GPT-4V if available)
OPENAI_API_KEY={openai_key}

# Optional: Anthropic API Key (for Claude 3.5 Sonnet)
ANTHROPIC_API_KEY={anthropic_key}

# Optional: DeepSeek API Key (for code analysis)
DEEPSEEK_API_KEY={deepseek_key}

# Optional: Mercury API Key (for additional analysis)
MERCURY_API_KEY={mercury_key}

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=1

# Database Configuration (optional)
DATABASE_URL=sqlite:///quality_metrics.db
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("\n✅ .env file created successfully!")
        
        # Test the configuration
        test_configuration()
        
    except Exception as e:
        print(f"❌ Error creating .env file: {e}")

def test_configuration():
    """Test the API key configuration."""
    print("\n🧪 Testing API Key Configuration...")
    
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Test Gemini API key
    gemini_key = os.getenv('GEMINI_API_KEY')
    if gemini_key:
        print(f"✅ Gemini API Key: {gemini_key[:5]}...{gemini_key[-4:]}")
        
        # Test Gemini API call
        try:
            import requests
            url = f"https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash?key={gemini_key}"
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print("✅ Gemini API connection successful!")
            else:
                print(f"⚠️  Gemini API test failed: {response.status_code}")
        except Exception as e:
            print(f"⚠️  Gemini API test error: {e}")
    else:
        print("❌ Gemini API Key not found!")
    
    # Test other API keys
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key:
        print(f"✅ OpenAI API Key: {openai_key[:5]}...{openai_key[-4:]}")
    
    anthropic_key = os.getenv('ANTHROPIC_API_KEY')
    if anthropic_key:
        print(f"✅ Anthropic API Key: {anthropic_key[:5]}...{anthropic_key[-4:]}")
    
    deepseek_key = os.getenv('DEEPSEEK_API_KEY')
    if deepseek_key:
        print(f"✅ DeepSeek API Key: {deepseek_key[:5]}...{deepseek_key[-4:]}")
    
    mercury_key = os.getenv('MERCURY_API_KEY')
    if mercury_key:
        print(f"✅ Mercury API Key: {mercury_key[:5]}...{mercury_key[-4:]}")

def install_dependencies():
    """Install required dependencies."""
    print("\n📦 Installing required dependencies...")
    
    try:
        import subprocess
        import sys
        
        # Install required packages
        packages = [
            'python-dotenv',
            'requests',
            'Pillow',
            'flask'
        ]
        
        for package in packages:
            print(f"Installing {package}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
        
        print("✅ Dependencies installed successfully!")
        
    except Exception as e:
        print(f"❌ Error installing dependencies: {e}")
        print("Please install manually: pip install python-dotenv requests Pillow flask")

def main():
    """Main setup function."""
    print("🚀 LLM Code Analyzer - API Key Setup")
    print("=" * 50)
    
    # Check if running in the right directory
    if not Path('code_analyzer').exists():
        print("❌ Please run this script from the project root directory!")
        return
    
    # Install dependencies
    install_dependencies()
    
    # Create .env file
    create_env_file()
    
    print("\n" + "=" * 50)
    print("🎉 Setup Complete!")
    print("\n📝 Next Steps:")
    print("1. Start the application: python run_local.py")
    print("2. Open http://localhost:5000 in your browser")
    print("3. Go to the 'Multi-Modal Analysis' tab")
    print("4. Upload an image and test Gemini Vision analysis!")
    print("\n🔗 Get your Gemini API key from: https://makersuite.google.com/app/apikey")

if __name__ == "__main__":
    main() 